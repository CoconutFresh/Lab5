
gbers002_bzhan014_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a8  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ff  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	70 d0       	rcall	.+224    	; 0x18a <main>
  aa:	78 c0       	rjmp	.+240    	; 0x19c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
#include <avr/io.h>
enum States {Start, Init, Inc, Dec, Hold, Reset}state;
unsigned char led = 0x00;
unsigned char button = 0x00;
void tick(){
	button = (~PINA & 0x03);
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
  b2:	83 70       	andi	r24, 0x03	; 3
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//Transitions
	switch(state){
  b8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state>
  bc:	92 30       	cpi	r25, 0x02	; 2
  be:	19 f1       	breq	.+70     	; 0x106 <tick+0x58>
  c0:	28 f4       	brcc	.+10     	; 0xcc <tick+0x1e>
  c2:	99 23       	and	r25, r25
  c4:	49 f0       	breq	.+18     	; 0xd8 <tick+0x2a>
  c6:	91 30       	cpi	r25, 0x01	; 1
  c8:	59 f0       	breq	.+22     	; 0xe0 <tick+0x32>
  ca:	3a c0       	rjmp	.+116    	; 0x140 <tick+0x92>
  cc:	94 30       	cpi	r25, 0x04	; 4
  ce:	19 f1       	breq	.+70     	; 0x116 <tick+0x68>
  d0:	f0 f0       	brcs	.+60     	; 0x10e <tick+0x60>
  d2:	95 30       	cpi	r25, 0x05	; 5
  d4:	71 f1       	breq	.+92     	; 0x132 <tick+0x84>
  d6:	34 c0       	rjmp	.+104    	; 0x140 <tick+0x92>
		case Start:
		{
			state = Init;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  de:	08 95       	ret
		}
		
		case Init:
		if(button == 0x01)
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	21 f4       	brne	.+8      	; 0xec <tick+0x3e>
		{
			state = Inc;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  ea:	39 c0       	rjmp	.+114    	; 0x15e <tick+0xb0>
			break;
		}
		else if(button == 0x02)
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	21 f4       	brne	.+8      	; 0xf8 <tick+0x4a>
		{
			state = Dec;
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  f6:	3c c0       	rjmp	.+120    	; 0x170 <tick+0xc2>
			break;
		}
		else if(button == 0x03)
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	09 f0       	breq	.+2      	; 0xfe <tick+0x50>
  fc:	45 c0       	rjmp	.+138    	; 0x188 <tick+0xda>
		{
			state = Reset;
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 104:	3e c0       	rjmp	.+124    	; 0x182 <tick+0xd4>
			state = Init;
			break;
		}
		
		case Inc:
		state = Hold;
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 10c:	08 95       	ret
		
		case Dec:
		state = Hold;
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 114:	08 95       	ret
		
		case Hold:
		if((button == 0x01) || (button == 0x02))
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	98 0f       	add	r25, r24
 11a:	92 30       	cpi	r25, 0x02	; 2
 11c:	a8 f1       	brcs	.+106    	; 0x188 <tick+0xda>
		{
			state = Hold;
			break;
		}
		else if(button == 0x03)
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	21 f4       	brne	.+8      	; 0x12a <tick+0x7c>
		{
			state = Reset;
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 128:	2c c0       	rjmp	.+88     	; 0x182 <tick+0xd4>
		}
		else
		{
			state = Init;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 130:	08 95       	ret
		}
		
		case Reset:
		if((button == 0x01) || (button == 0x02))
 132:	81 50       	subi	r24, 0x01	; 1
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	28 f1       	brcs	.+74     	; 0x182 <tick+0xd4>
			state = Reset;
			break;
		}
		else
		{
			state = Init;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 13e:	08 95       	ret
		}
		
		default:
		break;
	}
	switch(state){ //State actions
 140:	92 30       	cpi	r25, 0x02	; 2
 142:	69 f0       	breq	.+26     	; 0x15e <tick+0xb0>
 144:	18 f4       	brcc	.+6      	; 0x14c <tick+0x9e>
 146:	99 23       	and	r25, r25
 148:	31 f0       	breq	.+12     	; 0x156 <tick+0xa8>
 14a:	08 95       	ret
 14c:	93 30       	cpi	r25, 0x03	; 3
 14e:	81 f0       	breq	.+32     	; 0x170 <tick+0xc2>
 150:	95 30       	cpi	r25, 0x05	; 5
 152:	b9 f0       	breq	.+46     	; 0x182 <tick+0xd4>
 154:	08 95       	ret
		case Start:
		led = 0x00;
 156:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <led>
		PORTB = led;
 15a:	15 b8       	out	0x05, r1	; 5
		break;
 15c:	08 95       	ret
		
		case Init:
		break;
		
		case Inc:
		if(led < 0x09)
 15e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
 162:	89 30       	cpi	r24, 0x09	; 9
 164:	88 f4       	brcc	.+34     	; 0x188 <tick+0xda>
		{
			led += 0x01;
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
			PORTB = led;
 16c:	85 b9       	out	0x05, r24	; 5
			break;
 16e:	08 95       	ret
		}
		break;
		
		case Dec:
		if(led > 0x00)
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
 174:	88 23       	and	r24, r24
 176:	41 f0       	breq	.+16     	; 0x188 <tick+0xda>
		{
			led -= 0x01;
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
			PORTB = led;
 17e:	85 b9       	out	0x05, r24	; 5
			break;
 180:	08 95       	ret
		
		case Hold:
		break;
		
		case Reset:
		led = 0x00;
 182:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <led>
		PORTB = led;
 186:	15 b8       	out	0x05, r1	; 5
 188:	08 95       	ret

0000018a <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 18a:	11 b8       	out	0x01, r1	; 1
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 190:	84 b9       	out	0x04, r24	; 4
 192:	15 b8       	out	0x05, r1	; 5
	state = Start;
 194:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	while(1)
	{
		tick();
 198:	8a df       	rcall	.-236    	; 0xae <tick>
 19a:	fe cf       	rjmp	.-4      	; 0x198 <main+0xe>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
